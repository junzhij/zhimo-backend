/**
 * Example usage of PDF export functionality
 * This demonstrates how to use the SynthesisAgent to export notebooks to PDF
 */

import { synthesisAgent } from './index';

// Example function to demonstrate PDF export
export async function demonstratePDFExport() {
    try {
        // Example notebook ID and user ID (these would come from actual data)
        const notebookId = 'example-notebook-id';
        const userId = 'example-user-id';

        // Example compilation options
        const compilationOptions = {
            formatStyle: 'academic' as const,
            includeSourceReferences: true,
            includeMetadata: true,
            sectionSeparator: '\n\n---\n\n'
        };

        // Example PDF export options
        const pdfOptions = {
            template: 'academic' as const,
            pageSize: 'A4' as const,
            orientation: 'portrait' as const,
            includeTableOfContents: true,
            includePageNumbers: true,
            fontSize: 'medium' as const,
            headerText: 'ZhiMo Study Materials',
            footerText: 'Generated by ZhiMo AI Platform',
            margins: {
                top: '1in',
                right: '1in',
                bottom: '1in',
                left: '1in'
            }
        };

        console.log('Starting PDF export...');

        // Export notebook to PDF
        const pdfResult = await synthesisAgent.exportToPDF(
            notebookId,
            userId,
            compilationOptions,
            pdfOptions
        );

        if (pdfResult) {
            console.log('PDF export successful!');
            console.log(`Filename: ${pdfResult.filename}`);
            console.log(`File size: ${pdfResult.metadata.fileSize} bytes`);
            console.log(`Template used: ${pdfResult.metadata.template}`);
            console.log(`Generated at: ${pdfResult.metadata.generatedAt}`);

            // In a real application, you would save this to a file or send it as a response
            // For example: fs.writeFileSync(pdfResult.filename, pdfResult.buffer);

            return pdfResult;
        } else {
            console.log('PDF export failed - notebook not found or compilation error');
            return null;
        }

    } catch (error) {
        console.error('Error during PDF export demonstration:', error);
        throw error;
    }
}
// Example function to demonstrate different PDF templates
export async function demonstrateTemplateVariations() {
    const notebookId = 'example-notebook-id';
    const userId = 'example-user-id';

    const templates = [
        {
            name: 'Academic Template',
            options: {
                template: 'academic' as const,
                fontSize: 'medium' as const,
                includeTableOfContents: true,
                includePageNumbers: true
            }
        },
        {
            name: 'Modern Template',
            options: {
                template: 'modern' as const,
                fontSize: 'large' as const,
                includeTableOfContents: true,
                includePageNumbers: true
            }
        },
        {
            name: 'Minimal Template',
            options: {
                template: 'minimal' as const,
                fontSize: 'small' as const,
                includeTableOfContents: false,
                includePageNumbers: false
            }
        },
        {
            name: 'Report Template',
            options: {
                template: 'report' as const,
                fontSize: 'medium' as const,
                includeTableOfContents: true,
                includePageNumbers: true,
                headerText: 'Study Report',
                footerText: 'Confidential'
            }
        }
    ];

    console.log('Demonstrating different PDF templates...');

    for (const templateConfig of templates) {
        try {
            console.log(`\nGenerating ${templateConfig.name}...`);

            const pdfResult = await synthesisAgent.exportToPDF(
                notebookId,
                userId,
                { formatStyle: 'structured' },
                {
                    pageSize: 'A4',
                    orientation: 'portrait',
                    margins: {
                        top: '1in',
                        right: '1in',
                        bottom: '1in',
                        left: '1in'
                    },
                    ...templateConfig.options
                }
            );

            if (pdfResult) {
                console.log(`✓ ${templateConfig.name} generated successfully`);
                console.log(`  File: ${pdfResult.filename}`);
                console.log(`  Size: ${pdfResult.metadata.fileSize} bytes`);
            } else {
                console.log(`✗ ${templateConfig.name} generation failed`);
            }

        } catch (error) {
            console.error(`Error generating ${templateConfig.name}:`, error);
        }
    }
}

// Example function to demonstrate different page layouts
export async function demonstratePageLayouts() {
    const notebookId = 'example-notebook-id';
    const userId = 'example-user-id';

    const layouts = [
        {
            name: 'A4 Portrait',
            options: { pageSize: 'A4' as const, orientation: 'portrait' as const }
        },
        {
            name: 'A4 Landscape',
            options: { pageSize: 'A4' as const, orientation: 'landscape' as const }
        },
        {
            name: 'Letter Portrait',
            options: { pageSize: 'Letter' as const, orientation: 'portrait' as const }
        },
        {
            name: 'Legal Portrait',
            options: { pageSize: 'Legal' as const, orientation: 'portrait' as const }
        }
    ];

    console.log('Demonstrating different page layouts...');

    for (const layout of layouts) {
        try {
            console.log(`\nGenerating ${layout.name}...`);

            const pdfResult = await synthesisAgent.exportToPDF(
                notebookId,
                userId,
                { formatStyle: 'structured' },
                {
                    template: 'academic',
                    includeTableOfContents: true,
                    includePageNumbers: true,
                    fontSize: 'medium',
                    margins: {
                        top: '1in',
                        right: '1in',
                        bottom: '1in',
                        left: '1in'
                    },
                    ...layout.options
                }
            );

            if (pdfResult) {
                console.log(`✓ ${layout.name} generated successfully`);
            } else {
                console.log(`✗ ${layout.name} generation failed`);
            }

        } catch (error) {
            console.error(`Error generating ${layout.name}:`, error);
        }
    }
}